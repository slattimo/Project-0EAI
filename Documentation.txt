📝 Documentation

---

## 🧩 Project Overview

**Name:** TBD

**Purpose:** An AI-powered application to help users manage their emails faster and smarter through composing, summarizing, searching, and scheduling emails.

**Platforms:** Desktop (Electron), Mobile (React Native)

---

## 🎯 MVP Goal

Launch a fully functional EmailAI app where users can:

- Connect their email accounts (Gmail, Outlook, IMAP)
- Compose AI-generated emails
- Summarize email threads
- Smart search emails
- Save drafts and schedule future sends
- Manage subscriptions through Stripe

---

## 🛠 Tech Stack

| Layer | Technology |
| --- | --- |
| Backend | ASP.NET Core Minimal API |
| Database | PostgreSQL (Supabase, Railway, or Render) |
| Desktop App | Electron + React + TailwindCSS |
| Mobile App | React Native |
| AI Integration | OpenAI API (GPT-4 Turbo or 3.5 Turbo for MVP) |
| Payments | Stripe Subscriptions |
| Hosting | Railway/Supabase for backend + DB; Optional AWS or Render |

---

## 🧱 Architecture Overview

### **Backend:**

- Authentication (JWT + OAuth2)
- Email Syncing Services
- AI Request Services (Smart Compose, Summaries)
- Payment/Subscription Handling
- Scheduled Task Runner (for Scheduled Emails)

### **Frontend:**

- Dashboard (Home, Inboxes, Smart Compose, Summaries, Insights)
- Compose Interface (New emails, replies)
- Search Interface
- Settings & Billing Management

### **Mobile:**

- Mirror dashboard features in a mobile-first UI
- Push notifications for scheduled emails or replies (future roadmap)

---

## 📦 Database Schema (Simplified)

| Table | Fields |
| --- | --- |
| **Users** | id, email, password_hash, oauth_provider, subscription_status |
| **Emails** | id, user_id, subject, body, sender, recipients, date, thread_id |
| **Drafts** | id, user_id, subject, body, scheduled_send_time (nullable) |
| **ScheduledEmails** | id, user_id, draft_id, send_time |
| **Insights** | id, user_id, total_emails_sent, avg_response_time, ai_usage_count |

---

## 🔒 Authentication

- Email/password login with JWT tokens
- Google OAuth2 and Microsoft Outlook OAuth2
- Token encryption and refresh system for connected inboxes

---

## 🤖 AI Services

- **Smart Compose:** User prompts a subject → AI drafts a professional email.
- **Summarize Threads:** User selects an email thread → AI returns a condensed summary.

---

## 💳 Payment System

- Stripe Subscription Plans ($10/month starter plan)
- Stripe Webhooks for billing events (payment succeeded, subscription canceled)
- User access is gated by active subscription status.

---

## 📊 Insights Features (MVP)

- Number of emails composed/sent
- Number of AI generations used
- Average email response time
- Top 5 frequent contacts

---

## 📈 Development Roadmap

### **Phase 1:**

- Backend/API + Basic UI setup
- OAuth email fetching
- Core dashboard screens

### **Phase 2:**

- AI integration (Compose, Summarize)
- Drafts, Scheduling, and Search
- Stripe billing setup

### **Phase 3:**

- Polish UI/UX
- Launch Beta Test
- Prepare landing pages

### **Phase 4:**

- Public Launch
- Monitor, collect feedback
- Plan Phase 2 Features

---

## 💡 Future Features Ideas

- Auto-prioritization of emails
- Tone customization (professional, friendly, apologetic)
- AI-driven follow-ups
- Shared team inboxes
- Voice-to-email dictation
- Personal productivity analytics

---

# 📝 Notes

- Focus first on Gmail/Outlook integrations.
- Start with GPT-3.5 Turbo for cost savings if needed; upgrade to GPT-4 Turbo later.
- Build minimal and validate user demand quickly.